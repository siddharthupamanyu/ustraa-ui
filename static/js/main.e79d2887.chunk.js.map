{"version":3,"sources":["Categories/ProductList.js","Categories/CategoriesTabs.js","Categories/Categories.js","App.js","serviceWorker.js","index.js"],"names":["ProductList","props","children","value","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","useStyles","makeStyles","theme","root","flexGrow","width","backgroundColor","palette","background","paper","CategoriesTabs","classes","React","useState","setValue","className","AppBar","position","color","Tabs","onChange","event","newValue","indicatorColor","textColor","variant","scrollButtons","aria-label","Tab","label","Categories","Fragment","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oQAKe,SAASA,EAAYC,GAAQ,IAClCC,EAAqCD,EAArCC,SAAUC,EAA2BF,EAA3BE,MAAOC,EAAoBH,EAApBG,MAAUC,EADM,YACIJ,EADJ,8BAGzC,OACE,kBAACK,EAAA,EAAD,eACEC,UAAU,MACVC,KAAK,WACLC,OAAQN,IAAUC,EAClBM,GAAE,mCAA8BN,GAChCO,kBAAA,8BAAwCP,IACpCC,GAEHF,IAAUC,GAAS,kBAACQ,EAAA,EAAD,CAAKC,EAAG,GAAIX,ICTtC,IAAMY,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJC,SAAU,EACVC,MAAO,OACPC,gBAAiBJ,EAAMK,QAAQC,WAAWC,WAW/B,SAASC,IACtB,IAAMC,EAAUX,IADuB,EAGbY,IAAMC,SAAS,GAHF,mBAGhCxB,EAHgC,KAGzByB,EAHyB,KASvC,OACE,yBAAKC,UAAWJ,EAAQR,MACtB,kBAACa,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAM,WAC9B,kBAACC,EAAA,EAAD,CACE9B,MAAOA,EACP+B,SATa,SAACC,EAAOC,GAC3BR,EAASQ,IASHC,eAAe,UACfC,UAAU,UACVC,QAAQ,aACRC,cAAc,OACdC,aAAW,gCAEX,kBAACC,EAAA,EAAD,CAAKC,MAAM,aACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,aACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,eACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,cACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,cACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,aACX,kBAACD,EAAA,EAAD,CAAKC,MAAM,iBAGf,kBAAC3C,EAAD,CAAaG,MAAOA,EAAOC,MAAO,GAAlC,YAGA,kBAACJ,EAAD,CAAaG,MAAOA,EAAOC,MAAO,GAAlC,YAGA,kBAACJ,EAAD,CAAaG,MAAOA,EAAOC,MAAO,GAAlC,cAGA,kBAACJ,EAAD,CAAaG,MAAOA,EAAOC,MAAO,GAAlC,aAGA,kBAACJ,EAAD,CAAaG,MAAOA,EAAOC,MAAO,GAAlC,aAGA,kBAACJ,EAAD,CAAaG,MAAOA,EAAOC,MAAO,GAAlC,YAGA,kBAACJ,EAAD,CAAaG,MAAOA,EAAOC,MAAO,GAAlC,eCpES,SAASwC,IACpB,OACI,kBAAC,IAAMC,SAAP,KACI,kBAACrB,EAAD,OCQGsB,MAVf,WACE,OACE,kBAAC,IAAMD,SAAP,KACE,kBAACE,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACJ,EAAD,SCIYK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e79d2887.chunk.js","sourcesContent":["import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nexport default function ProductList(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`scrollable-auto-tabpanel-${index}`}\r\n      aria-labelledby={`scrollable-auto-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={3}>{children}</Box>}\r\n    </Typography>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport ProductList from \"./ProductList\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: \"100%\",\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\n// function a11yProps(index) {\r\n//     return {\r\n//       id: `scrollable-auto-tab-${index}`,\r\n//       'aria-controls': `scrollable-auto-tabpanel-${index}`,\r\n//     };\r\n//   }\r\n\r\nexport default function CategoriesTabs() {\r\n  const classes = useStyles();\r\n\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          aria-label=\"scrollable auto tabs example\"\r\n        >\r\n          <Tab label=\"Item One\" />\r\n          <Tab label=\"Item Two\" />\r\n          <Tab label=\"Item Three\" />\r\n          <Tab label=\"Item Four\" />\r\n          <Tab label=\"Item Five\" />\r\n          <Tab label=\"Item Six\" />\r\n          <Tab label=\"Item Seven\" />\r\n        </Tabs>\r\n      </AppBar>\r\n      <ProductList value={value} index={0}>\r\n        Item One\r\n      </ProductList>\r\n      <ProductList value={value} index={1}>\r\n        Item Two\r\n      </ProductList>\r\n      <ProductList value={value} index={2}>\r\n        Item Three\r\n      </ProductList>\r\n      <ProductList value={value} index={3}>\r\n        Item Four\r\n      </ProductList>\r\n      <ProductList value={value} index={4}>\r\n        Item Five\r\n      </ProductList>\r\n      <ProductList value={value} index={5}>\r\n        Item Six\r\n      </ProductList>\r\n      <ProductList value={value} index={6}>\r\n        Item Seven\r\n      </ProductList>\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport CategoriesTabs from './CategoriesTabs'\r\n\r\nexport default function Categories(){\r\n    return(\r\n        <React.Fragment>\r\n            <CategoriesTabs />\r\n        </React.Fragment>\r\n    );\r\n}","import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Categories from './Categories/Categories'\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <Container maxWidth=\"sm\">\n        <Categories />\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}