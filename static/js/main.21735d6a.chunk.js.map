{"version":3,"sources":["Categories/ProductList.js","Environment/Environment.js","Categories/CategoriesTabs.js","Categories/Categories.js","App.js","serviceWorker.js","index.js"],"names":["ColorButton","withStyles","theme","root","color","palette","getContrastText","backgroundColor","Button","useStyles","makeStyles","card","display","details","flexDirection","content","flex","cover","width","controls","alignItems","paddingLeft","spacing","paddingBottom","playIcon","height","cardMedia","maxWidth","button","marginTop","ProductList","props","classes","useTheme","data","name","img","image_urls","weight","unit","weight_unit","price","iis","final_price","rating","is_in_stock","Card","className","CardMedia","component","alt","image","x120","title","CardContent","Typography","variant","disabled","IconButton","aria-label","console","log","flexGrow","background","paper","CategoriesTabs","React","useState","value","state","setState","AppBar","position","Tabs","onChange","event","newValue","a","async","categoryId","currentTarget","tabIndex","fetch","json","then","indicatorColor","textColor","scrollButtons","category_list","map","Tab","key","category_id","label","category_name","category_image","products","id","Categories","Fragment","App","useEffect","response","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21735d6a.chunk.js","sourcesContent":["import React from \"react\";\r\n// import PropTypes from \"prop-types\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport { makeStyles, useTheme, withStyles } from \"@material-ui/core/styles\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst ColorButton = withStyles(theme => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(\"#4fcf64\"),\r\n    backgroundColor: \"#4fcf64\"\r\n  }\r\n}))(Button);\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  card: {\r\n    display: \"flex\"\r\n  },\r\n  details: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\"\r\n  },\r\n  content: {\r\n    flex: \"1 0 auto\"\r\n  },\r\n  cover: {\r\n    width: 151\r\n  },\r\n  controls: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    paddingLeft: theme.spacing(1),\r\n    paddingBottom: theme.spacing(1)\r\n  },\r\n  playIcon: {\r\n    height: 38,\r\n    width: 38\r\n  },\r\n  cardMedia: {\r\n    height: 120,\r\n    maxWidth: 120\r\n  },\r\n  button: {\r\n    display: \"block\",\r\n    marginTop: 5\r\n  }\r\n}));\r\n\r\n// const useStyles = makeStyles({\r\n//   cardMedia: {\r\n//     height: 520,\r\n//     //paddingTop: \"56.25%\", // 16:9,\r\n//     //marginTop: \"30\"\r\n//   }\r\n// });\r\n\r\nexport default function ProductList(props) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const {\r\n    name,\r\n    image_urls: img,\r\n    weight,\r\n    weight_unit: unit,\r\n    price,\r\n    final_price: fp,\r\n    rating,\r\n    is_in_stock: iis,\r\n    ...other\r\n  } = props.data;\r\n\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardMedia\r\n        className={classes.cardMedia}\r\n        component=\"img\"\r\n        alt=\"Contemplative Reptile\"\r\n        height=\"140\"\r\n        image={img.x120}\r\n        title=\"Contemplative Reptile\"\r\n      />\r\n      <div className={classes.details}>\r\n        <CardContent className={classes.content}>\r\n          <Typography component=\"h7\" variant=\"h7\">\r\n            {name}\r\n          </Typography>\r\n          <Typography variant=\"subtitle1\" color=\"textSecondary\">\r\n            {`(${weight} ${unit})`}\r\n          </Typography>\r\n          <Typography component=\"h8\" variant=\"h8\">\r\n            {`â‚¹ ${price}`}\r\n          </Typography>\r\n\r\n          <ColorButton\r\n            className={classes.button}\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={iis ? false : true}\r\n          >\r\n            {iis ? \"ADD TO CART\" : \"OUT OF STOCK\"}\r\n          </ColorButton>\r\n        </CardContent>\r\n        <div className={classes.controls}>\r\n          <IconButton aria-label=\"Previous\"></IconButton>\r\n          <IconButton aria-label=\"Play/pause\"></IconButton>\r\n          <IconButton aria-label=\"Next\"></IconButton>\r\n        </div>\r\n      </div>\r\n      {console.log(name, img)}\r\n      {/* <Typography\r\n        component=\"div\"\r\n        role=\"tabpanel\"\r\n        hidden={value !== index}\r\n        id={`scrollable-auto-tabpanel-${index}`}\r\n        aria-labelledby={`scrollable-auto-tab-${index}`}\r\n        {...other}\r\n      >\r\n        {value === index && <Box p={3}>{children}</Box>}\r\n      </Typography> */}\r\n    </Card>\r\n  );\r\n}\r\n","export const BaseAddress = \"https://backend.ustraa.com/rest/V1/api/homemenucategories/v1.0.1\";","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport ProductList from \"./ProductList\";\r\nimport { ThemeProvider } from \"@material-ui/core/styles\";\r\nimport { BaseAddress } from \"../Environment/Environment\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    width: \"100%\",\r\n    backgroundColor: theme.palette.background.paper\r\n  }\r\n}));\r\n\r\nexport default function CategoriesTabs(props) {\r\n  const classes = useStyles();\r\n  const [state, setState] = React.useState({\r\n    data: {},\r\n    value: 0\r\n  });\r\n\r\n  async function handleChange(event, newValue) {\r\n    const categoryId = event.currentTarget.tabIndex;\r\n    console.log(event.currentTarget);\r\n    const response = await fetch(\r\n      `https://backend.ustraa.com/rest/V1/api/catalog/v1.0.1?category_id=${categoryId}`\r\n    );\r\n    response.json().then(data => {\r\n      console.log(data)\r\n      setState({ ...state, data: data, value: newValue });\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={state.value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          variant=\"scrollable\"\r\n          scrollButtons=\"auto\"\r\n          aria-label=\"scrollable auto tabs example\"\r\n        >\r\n          {props.data.category_list\r\n            ? props.data.category_list.map(value => {\r\n                console.log(value);\r\n                return (\r\n                  <Tab\r\n                    key={value.category_id}\r\n                    tabIndex={value.category_id}\r\n                    label={value.category_name}\r\n                    background={value.category_image}\r\n                  />\r\n                );\r\n              })\r\n            : \"\"}\r\n        </Tabs>\r\n      </AppBar>\r\n      {state.data.products\r\n        ? state.data.products.map(value => {\r\n            return <ProductList data={value} key={value.id} />;\r\n          })\r\n        : \"\"}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport CategoriesTabs from \"./CategoriesTabs\";\r\n\r\nexport default function Categories(props) {\r\n  return (\r\n    <React.Fragment>\r\n      <CategoriesTabs data={props.data}/>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","import React from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Categories from \"./Categories/Categories\";\nimport { BaseAddress } from \"./Environment/Environment\";\n\nfunction App() {\n  const [state, setState] = React.useState({});\n  React.useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(`${BaseAddress}?device_type=mob`);\n      response.json().then(response => {\n        setState(response);\n      })\n    }\n    fetchData();\n  }, []);\n\n  return (\n    <React.Fragment>\n      <Container maxWidth=\"sm\">\n        <Categories data={state} />\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}